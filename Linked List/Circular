#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    Node(int d){
        this->data=d;
        this->next=NULL;
    }
};

void Insertion(Node* &tail,int d)
{
    Node* newnode=new Node(d);
    if(tail==NULL){
        tail=newnode;
        tail->next=newnode;
    }
    else{
        newnode->next=tail->next;
        tail->next=newnode;
        tail=newnode;
    }
}

void insertionAtPostion(Node* &tail,int pos,int d)
{
    Node* newnode=new Node(d);
    if(pos==1)
    {
        newnode->next=tail->next;
        tail->next=newnode;
        return ;
    }
    int cnt=1;
    Node* temp=tail->next;
    while(cnt<pos-1)
    {
        temp=temp->next;
        cnt++;
    }
    if(temp->next!=tail->next)
    {
        newnode->next=temp->next;
        temp->next=newnode;
        return ;
    }
     newnode->next=temp->next;
     temp->next=newnode;
}

void print(Node* tail)
{
    Node* temp=tail->next;
    while(temp->next!=tail->next){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<temp->data<<" ";
    cout<<endl;
}
void deletion(Node* &tail,int pos)
{
    Node* temp=tail->next;
    if(pos==1){
       tail->next=temp->next;
       temp->next=NULL;
       free(temp);
       return ;
    }
    int cnt=1;
    Node* curr=tail->next;
    Node* prevNode=NULL;
    while(cnt<pos){
        prevNode=curr;
        curr=curr->next;
        cnt++;
    }
    if(curr->next==tail->next){
        prevNode->next=curr->next;
        tail=prevNode;
        free(curr);
        return ;
    }
    prevNode->next=curr->next;
    curr->next=NULL;
    free(curr);
}

int main()
{
    Node* tail=NULL;
    Insertion(tail,11);
    Insertion(tail,8);
    Insertion(tail,12);
    Insertion(tail,13);
    Insertion(tail,14);
    print(tail);
    insertionAtPostion(tail,5,100);
    print(tail);
    deletion(tail,4);
    print(tail);
}


